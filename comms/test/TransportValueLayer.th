//
// Copyright 2017 - 2018 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "comms/comms.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class TransportValueLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();

private:

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > BeOptions;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<std::back_insert_iterator<std::vector<char> > >,
        comms::option::LengthInfoInterface
    > BeBackInsertOptions;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::BigEndian
    > NonPolymorphicBigEndianTraits;

    using FieldBase = comms::Field<comms::option::BigEndian>;

    using VersionField =
        comms::field::IntValue<
            FieldBase,
            std::uint16_t,
            comms::option::DefaultNumValue<5>
        >;

    typedef std::tuple<
        VersionField
    > ExtraVersionTransport;

    template <typename TOptions = comms::option::EmptyOption>
    struct ExtraTransportMessageBase : public
        comms::Message<
            TOptions,
            comms::option::ExtraTransportFields<ExtraVersionTransport>
        >
    {
        using Base =
            comms::Message<
                TOptions,
                comms::option::ExtraTransportFields<ExtraVersionTransport>
            >;
    public:
        COMMS_MSG_TRANSPORT_FIELDS_NAMES(version);
    };

    typedef ExtraTransportMessageBase<NonPolymorphicBigEndianTraits> BeNonPolymorphicMessageBase;

    typedef Message1<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg1;
    typedef Message2<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg2;

    using SizeField =
        comms::field::IntValue<
            FieldBase,
            std::uint16_t
        >;

    using IdField =
        comms::field::EnumValue<
            FieldBase,
            MessageType,
            comms::option::FixedLength<2>
        >;

    template <typename TMessage>
    using BeforeIdProtocolStack =
        comms::protocol::MsgSizeLayer<
            SizeField,
            comms::protocol::TransportValueLayer<
                VersionField,
                ExtraTransportMessageBase<>::TransportFieldIdx_version,
                comms::protocol::MsgIdLayer<
                    IdField,
                    TMessage,
                    AllMessages<TMessage>,
                    comms::protocol::MsgDataLayer<>
                >
            >
        >;

    template <typename TMessage>
    using NoVersionProtocolStack =
        comms::protocol::MsgSizeLayer<
            SizeField,
            comms::protocol::MsgIdLayer<
                IdField,
                TMessage,
                AllMessages<TMessage>,
                comms::protocol::MsgDataLayer<>
            >
        >;

    template <typename TMessage, typename... TOpt>
    using AfterIdProtocolStack =
        comms::protocol::MsgSizeLayer<
            SizeField,
            comms::protocol::MsgIdLayer<
                IdField,
                TMessage,
                AllMessages<TMessage>,
                comms::protocol::TransportValueLayer<
                    VersionField,
                    ExtraTransportMessageBase<>::TransportFieldIdx_version,
                    comms::protocol::MsgDataLayer<>,
                    TOpt...
                >
            >
        >;
};

void TransportValueLayerTestSuite::test1()
{
    static const char Buf[] = {
        0x0, 0x6, 0x0, 0x4, 0x0, MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using Stack = BeforeIdProtocolStack<MsgBase>;

    Stack stack;

    TS_ASSERT_EQUALS(stack.length(), 6U);

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr->transportField_version().value(), 4U);

    auto& msg1 = dynamic_cast<Message1<MsgBase>&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);
}

void TransportValueLayerTestSuite::test2()
{

    static const char ExpectedBuf[] = {
        0x0, 0x6, 0x0, 0x5, 0x0, MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(ExpectedBuf)>::value;
    char buf[BufSize] = {0};

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using Stack = BeforeIdProtocolStack<MsgBase>;

    Message1<MsgBase> msg;
    std::get<0>(msg.fields()).value() = 0x0102;

    Stack stack;
    commonWriteReadMsgTest(stack, msg, buf, BufSize, &ExpectedBuf[0]);
}

void TransportValueLayerTestSuite::test3()
{
    static const char Buf[] = {
        0x0, 0x6, 0x0, MessageType1, 0x0, 0x8, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using Stack = AfterIdProtocolStack<MsgBase>;

    Stack stack;

    TS_ASSERT_EQUALS(stack.length(), 6U);

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr->transportField_version().value(), 8U);

    auto& msg1 = dynamic_cast<Message1<MsgBase>&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);
}

void TransportValueLayerTestSuite::test4()
{
    static const char Buf[] = {
        0x0, 0x6, 0x0, 0x4, 0x0, MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using Stack = BeforeIdProtocolStack<BeNonPolymorphicMessageBase>;

    Stack stack;

    TS_ASSERT_EQUALS(stack.length(), 6U);

    NonPolymorphicBeMsg1 msg;
    commonReadWriteMsgDirectTest(stack, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(std::get<0>(msg.fields()).value(), 0x0102);
    TS_ASSERT_EQUALS(msg.transportField_version().value(), 4U);

    Stack::AllFields fields;
    commonReadWriteMsgDirectTest(stack, fields, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(std::get<0>(fields).value(), 0x6);
    TS_ASSERT_EQUALS(std::get<1>(fields).value(), 0x4);
    TS_ASSERT_EQUALS(std::get<2>(fields).value(), MessageType1);
    TS_ASSERT_EQUALS(std::get<3>(fields).value(), std::vector<std::uint8_t>(Buf + 6, Buf + 8));
    TS_ASSERT_EQUALS(std::get<0>(msg.fields()).value(), 0x0102);
    TS_ASSERT_EQUALS(msg.transportField_version().value(), 4U);

    NonPolymorphicBeMsg2 msg2;
    commonReadWriteMsgDirectTest(stack, msg2, &Buf[0], BufSize, comms::ErrorStatus::InvalidMsgId);

    Stack::AllFields fields2;
    commonReadWriteMsgDirectTest(stack, fields2, msg2, &Buf[0], BufSize, comms::ErrorStatus::InvalidMsgId);
    TS_ASSERT_EQUALS(std::get<0>(fields2).value(), 0x6);
    TS_ASSERT_EQUALS(std::get<1>(fields2).value(), 0x4);
    TS_ASSERT_EQUALS(std::get<2>(fields2).value(), MessageType1);

}

void TransportValueLayerTestSuite::test5()
{
    static const char Buf[] = {
        0x0, 0x4, 0x0, MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using Stack = AfterIdProtocolStack<MsgBase, comms::option::PseudoValue>;

    Stack stack;
    TS_ASSERT_EQUALS(stack.length(), 4U);

    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr->transportField_version().value(), 5U);

    stack.nextLayer().nextLayer().pseudoField().value() = 8U;
    auto msgPtr2 = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr2);
    TS_ASSERT_EQUALS(msgPtr2->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr2->transportField_version().value(), 8U);
}
